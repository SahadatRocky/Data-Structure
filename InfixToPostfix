
#include<iostream>
#include<math.h>

#define BLANK ' '
#define TAB '\t'
#define MAX 50
using namespace std;
void push(long int symbol);
long int pop();
void infix_to_postfix();
int priority(char symbol);
int isEmpty();
int white_space(char );

char infix[MAX],,postfix[MAX];
long int stack[MAX];
int top;

int main()
{
        long int value;
        top=-1;
        cout<<"Enter infix : ";
        cin.get(infix,MAX);
        infix_to_postfix();
        cout<<"Postfix : "<<postfix<<endl;
        return 0;

}

void infix_to_postfix()
{
        unsigned int i,p=0;
        char next;
        char symbol;
        for(i=0;i<infix[i]!='\0';i++)
        {
                symbol=infix[i];
                if(!white_space(symbol))
                {
                        switch(symbol)
                        {
                        case '(':
                                push(symbol);
                                break;
                        case ')':
                                while((next=pop())!='(')
                                        postfix[p++] = next;
                                break;
                        case '+':
                        case '-':
                        case '*':
                        case '/':
                        case '%':
                        case '^':
                                while( !isEmpty( ) &&  priority(stack[top])>= priority(symbol) )
                                        postfix[p++]=pop();
                                push(symbol);
                                break;
                        default:
                             postfix[p++]=symbol;
                        }
                }
        }
        while(!isEmpty( ))
                postfix[p++]=pop();
        postfix[p]='\0';
}


int priority(char symbol){
        switch(symbol)
        {
        case '(':
                return 0;
        case '+':
        case '-':
                return 1;
        case '*':
        case '/':
        case '%':
                return 2;
        case '^':
                return 3;
        default :
                return 0;
        }
}

void push(long int symbol){
        if(top>MAX)
        {
                cout<<"Stack overflow"<<endl;

        }else{
        stack[++top]=symbol;
        }
}

long int pop(){
        if( isEmpty() )
        {
                cout<<"Stack underflow"<<endl;

        }else{
        return (stack[top--]);
        }

}
int isEmpty(){
        if(top==-1)
                return 1;
        else
                return 0;
}

int white_space(char symbol){
        if( symbol == BLANK || symbol == TAB )
                return 1;
        else
                return 0;
}
