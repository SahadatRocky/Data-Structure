
#include <iostream>

using namespace std;

class Stack
{
        int *s; // array to store the stack elements
        int MAXSIZE;
        int top;

        public:
              Stack()
            {
               // top=-1;
            }
            void resizeStack(int size)
            {
            int *tempS = new int [size];
            MAXSIZE = size;
            for(int i=0;i<top;i++){
                tempS[i] = s[i];
            }
            delete s;
            s = tempS;
            }

            void push(int value)
            {
              if(isStackFull()){
                 cout<<"\t Overflow!!! Stack is Full ...";
                }
                else
                {
                  s[top] = value;
                  top++;
                }
            }


            int pop()
            {
               int x;
               if(isStackEmpty()){
                   cout<<"\tUnderflow!!! Stack is Empty...";
                   return NULL;
            }
            else{
                top--;
                x=s[top] ;
            }
              return x;
            }

            bool isStackEmpty()
            {
                //your code here
                // return true if Stack is empty false otherwise
                return (top==0);
            }

            bool isStackFull()
            {
                  //your code here
                // return true if Stack is full false otherwise
                return (top>=MAXSIZE);
            }

            int stackSize()
            {
                //your code here
                return top;
               //return current allocated size of the Stack
            }

           void display_stack()
            {
                //your code here
                for(int i=top-1;i>=0;i--)
                    cout<< "\t\t"<<s[i] <<endl;
                // display all elements of Stack from top to bottom.

            }
            int topp()
            {
                //return top value here
                if(isStackEmpty()){
                    cout<<"\tStack is Empty...";
                    return NULL;
                }
                return s[top-1];
            }

            void stack_initialize()
            {
                top=0;
                MAXSIZE = 3;
                s = new int [MAXSIZE];
            }
};

int main()
{
    int option,n, value,MAXSIZE;
    Stack s;
    s.stack_initialize();
    cout<<"C++ program to implement stack operations\n";
    do
    {
        cout<<"\n\n 1.Push an element in stack";
        cout<<"\n 2.Pop an element from stack";
        cout<<"\n 3.Display stack";
        cout<<"\n 4.Display current stack size ";
        cout<<"\n 5.Display top element ";
        cout<<"\n 6.Resize Stack ";
        cout<<"\n 7.Exit";
        cout<<"\n Enter your choice: ";
        cin>>option;
        switch(option)
        {
        case 1:
            cout<<"\n Insert an element in stack : ";
            cin>>n;
            s.push(n);
            break;
        case 2:
            value = s.pop();
            if(value!=NULL)
            cout<<"\n \tPopped element is: "<<value<<endl;
            break;
        case 3:
            s.display_stack();
            break;
        case 4:
            value=s.stackSize();
            cout<<" \n\tCurrently number of element in stack is "<<value;
            break;
        case 5:
            value=s.topp();
            if(value != NULL)
                cout<<"\n\tCurrent top element is "<<value;
            break;
        case 6:
            cout<<"Provide the New Size : ";
            cin>>MAXSIZE;
            s.resizeStack(MAXSIZE);
            break;
        case 7:
            return 0;
        }
    }
    while(option!=7);

    return 0;
}
